import{_ as n,c as e,o as i,O as t}from"./chunks/framework.d7e37bdc.js";const a="/nginx_init.png",l="/nginx_config.png",u=JSON.parse('{"title":"Nginx","description":"","frontmatter":{},"headers":[],"relativePath":"serve/nginx.md","filePath":"serve/nginx.md","lastUpdated":null}'),o={name:"serve/nginx.md"},r=t('<h1 id="nginx" tabindex="-1">Nginx <a class="header-anchor" href="#nginx" aria-label="Permalink to &quot;Nginx&quot;">​</a></h1><p>参考资料：</p><ul><li><a href="https://juejin.cn/post/7210958340712316983" target="_blank" rel="noreferrer">前端必备的 nginx 知识点</a></li><li><a href="https://blog.csdn.net/weixin_45151960/article/details/107847090" target="_blank" rel="noreferrer">CentOS 基础常用命令大全集合</a></li><li><a href="http://www.9502669.com/61231.html" target="_blank" rel="noreferrer">nginx 和 nodejs 的区别是什么</a></li><li><a href="https://zhuanlan.zhihu.com/p/34943332" target="_blank" rel="noreferrer">8 分钟带你深入浅出搞懂 Nginx</a></li><li><a href="https://mp.weixin.qq.com/s/XoqGvYBabW8YBl9xEeNYZw" target="_blank" rel="noreferrer">Nginx 详解，睡前十分钟啃完值了！</a> （侧重介绍了负载均衡等配置）</li><li><a href="https://juejin.cn/post/6844904129987526663" target="_blank" rel="noreferrer">连前端都看得懂的《Nginx 入门指南》</a>👍<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>想要深入的话还是建议去读读相关的 Nginx 书籍 或者 阅读官网的文档</p></div></li></ul><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><hr><p>为啥会做这部分的笔记，主要是我一直对 web 服务存在一些疑惑：</p><ol><li><p><strong>Node 或其他语言创建的 Web 服务与 Nginx 有啥区别？</strong></p></li><li><p><strong>为啥一定要使用 Nginx，Nginx 要如何使用和配置</strong></p><blockquote><p>先来看看 Nginx 简介:<br>    Nginx 是一个使用 c 语言开发的高性能的 http 服务器及反向代理服务器。侧重关心 HTTP 协议层面的传输和访问控制，直面外来请求，可以直接返回资源给静态请求，转发动态请求给后面的应用服务（tomcat，django 什么的）。<br>    通俗的说因为现在电脑硬件的限制，通过 http 在软件层面构建一个完整的大型系统成为一个广泛的需求。http 交互，控制越来越重要，所以需要一个专门处理 http 请求的服务器。（例如：分布式系统，阿里云）</p></blockquote><p>与 Node 的区别：</p><ul><li>nginx 主要是使用 C 编程语言开发的，而 node 是使用 C、C++和 JavaScript 开发的；</li><li>Nginx 和 node 相比，大型用户请求所需的时间较少、响应并发用户请求所需的时间较短；</li><li>Node 的吞吐量很低，Nginx 的很高</li></ul><p>重点：Nginx 可以作为静态页面的 Web 服务器，同时还支持 CGI 协议的动态语言，比如 Perl、PHP 等。但是不支持 Java。Java 程序只能通过与 Tomcat 配合完成。Nginx 专为性能优化而开发，性能是其最重要的考量，实现上非常注重效率，能经受高负载的考验，有报告表明能支持高达 50000 个并发连接数。</p><div class="tip custom-block"><p class="custom-block-title">Conclusion</p><p>  个人理解其实 Nginx 就是用来做代理，优势是动静分离和负载均衡，就是把静态资源放到 Nginx 上，由 Nginx 管理，动态请求通过负载均衡的配置转发给后端。</p><p>  Nginx 正向代理可以搭建 vpn，这个后期可以尝试搭建一下。</p></div></li></ol><h2 id="使用和配置" tabindex="-1">使用和配置 <a class="header-anchor" href="#使用和配置" aria-label="Permalink to &quot;使用和配置&quot;">​</a></h2><ol><li><h3 id="在-centos-系统下的基本命令" tabindex="-1">在 CentOS 系统下的基本命令： <a class="header-anchor" href="#在-centos-系统下的基本命令" aria-label="Permalink to &quot;在 CentOS 系统下的基本命令：&quot;">​</a></h3><ul><li><code>yum install nginx # 安装nginx</code></li><li><code>nginx # 直接会启动nginx服务</code></li><li><code>nginx -t # 检查配置的命令</code></li><li><code>nginx -help # 查看其他命令</code></li></ul></li></ol><p>启动完 nginx 后，在浏览器中访问服务器 IP，会出现相应的 nginx 初始化页面： <img src="'+a+'" alt="image"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>⚡️ 初始化页面的路径可以通过 nginx 中的配置文件查看<br><code>whereis nginx # 查看全局的nginx路径</code><br><code>nginx -t # 可以看到nginx的配置文件路径</code></p></div><ol start="2"><li><h3 id="查看-nginx-配置文件" tabindex="-1">查看 nginx 配置文件 ✌️ <a class="header-anchor" href="#查看-nginx-配置文件" aria-label="Permalink to &quot;查看 nginx 配置文件 :v:&quot;">​</a></h3><p>首先找到 nginx 的配置文件路径：<code>nginx -t</code><br><img src="'+l+'" alt="image"></p><p>查看文件内容：<code>cat /www/server/nginx/conf/nginx.conf</code></p></li></ol><p>搁置中，待更新....<br> 等后面项目有用到的时候应该就会回来更新了，毕竟需要的时候才能感受到他的作用。<br> 主要是每次都要打开虚拟机啥的有点麻烦（没有云服务器 🙉）</p>',13),c=[r];function s(g,p,x,d,h,_){return i(),e("div",null,c)}const m=n(o,[["render",s]]);export{u as __pageData,m as default};
